.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_indices_computeIndices_noSensorDefined.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_indices_computeIndices_noSensorDefined.py:


Compute a spectral indice or an expression without defining a sensor
=============================================================================

This example shows how to compute an expression or an indice in a time series (or at one acquisition)
without defining a sensor.


Use sample from Sentinel2 level 3A syntheses (from Theia)
--------------------------------------------------------------------


.. code-block:: default

    from museopheno import indices,datasets

    X,dates = datasets.Sentinel2_3a_2018(return_dates=True,get_only_sample=True)

    print(X.shape)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Total number of blocks : 246
    (227, 70)


We have to define the band order and the number of compenent (i.e. number of band per date)



.. code-block:: default


    band_order = ['2','3','4','8','5','6','7','8A','11','12']







As our raster has 10 bands per date, let's check the number of columns of X array  divided by the numver of bands per date



.. code-block:: default


    print('Image contains {} dates.'.format(int(X.shape[1]/len(band_order))))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Image contains 7 dates.


Let's create an expression
--------------------------------------------------------------------------


.. code-block:: default


    expression = 'B8/(B2+1)'

    result = indices.generateIndice(X,band_order=band_order,expression=expression)

    print(result)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [[20.149254 23.983051 19.460993 ... 14.822695 13.846154 10.150685]
     [19.459017 22.279661 20.736    ... 14.1      14.229508  9.512196]
     [13.817679 17.858065 17.89726  ... 13.373494 13.32258   8.368421]
     ...
     [ 8.202248 10.012048 23.02649  ... 16.273195 15.801047 10.828829]
     [ 9.511167 11.612732 24.324503 ... 17.534391 16.851065 12.08295 ]
     [11.386905 14.587248 22.365854 ... 17.228426 16.973822 12.671171]]


Plot result



.. code-block:: default

    from matplotlib import pyplot as plt
    from datetime import datetime
    dateToDatetime = [datetime.strptime(str(date),'%Y%m%d') for date in dates]
    plt.plot_date(dateToDatetime,result.T,'-o')


.. image:: /auto_examples/indices/images/sphx_glr_computeIndices_noSensorDefined_001.png
    :class: sphx-glr-single-img





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.436 seconds)


.. _sphx_glr_download_auto_examples_indices_computeIndices_noSensorDefined.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: computeIndices_noSensorDefined.py <computeIndices_noSensorDefined.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: computeIndices_noSensorDefined.ipynb <computeIndices_noSensorDefined.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
